Vehicle Rental Service

Description:
Flipkart is starting a new vehicle rental service. In this service, we will rent different kinds of vehicles such as cars and bikes.

Features:
Rental service has multiple branches throughout the city. Assume one city for now.
Each branch has a limited number of different kinds of vehicles.
Each vehicle can be booked with a predefined price. For simplicity, assume fixed pricing.
Each vehicle can be booked in multiples of 1 hour slot each. (For simplicity, assume slots of single day)
No past bookings should be allowed.

Requirements:
Onboard a new branch with available vehicles
Onboard new vehicle(s) of existing type to a particular branch
Rent vehicle for a time slot and a vehicle type(lowest price as the default choice extendable to any other strategy). 
Display available vehicles for a given branch sorted on price
Vehicle will have to be dropped at the same branch where it was picked up.

Bonus question:
Dynamic pricing - demand vs supply. If 80% cars in a particular branch are booked, increase the price by 10%.
Customers should be able to choose vehicles concurrently.

Other Details:
Do not use any database or NoSQL store, use in-memory store for now. 
Do not create any UI for the application.
Write a driver class for demo purposes. Which will execute all the commands at one place in the code and test cases.
Please prioritize code compilation, execution and completion.
Work on the expected output first and then add good-to-have features of your own.

Expectations:
Make sure that you can execute your code and show that it is working.
Make sure that code is functionally correct.
Work on the expected output first and then add good-to-have features of your own.
Code should be modular and readable.
Separation of concern should be addressed.
Code should easily accommodate new requirements with minimal changes.
Code should be easily testable.
Input can be taken in your desired format[not necessary to follow the same grammar], but the API’s should remain as is(should contain all the input params)


Test Cases:
(Test cases are defined for understanding feature requirements only. Please model it appropriately based on your service implementation)

add_branch(‘gachibowli’, [“1 suv for Rs.12 per hour”, “3 sedan for Rs.10 per hour”, “3 bikes for Rs.20 per hour”]);
add_branch(‘kukatpally’, [“3 sedan for Rs.11 per hour”, “3 bikes for Rs.30 per hour”, “4 hatch_back for Rs.8 per hour”]);
add_branch(‘miyapur’, [“1 suv for Rs.11 per hour”, “10 bikes for Rs.3 per hour”, “3 sedan for Rs.10 per hour”]);
add_vehicle(“gachibowli”, “1 sedan”)
rent_vehicle(‘suv’, 20th Feb 10:00PM, 20th Feb 12:00PM) // return booked from miyapur
rent_vehicle(‘suv’, 20th Feb 10:00PM, 20th Feb 12:00PM) //return booked from gachibowli
rent_vehicle(‘suv’, 20th Feb 10:00PM, 20th Feb 12:00PM) // return - No availability 
get_available_vehicles(‘gachibowli’, time range)
3 ‘sedan’ available for Rs 10
3 bikes available for Rs 20 

print_system_view(20th Feb 11:00PM, 20th Feb 12:00PM)

       Output:
			gachibowli:
				All suv are booked
				3 sedan available for Rs 10
				3 bikes available for Rs 20 
			kukatpally:
				3 sedan available for Rs 11
				3 bikes available for Rs 30 
				4  hatch_back available for Rs 8
			miyapur:
				All suv are booked
				3 sedan available for Rs 10
				10 bikes available for Rs 3 

